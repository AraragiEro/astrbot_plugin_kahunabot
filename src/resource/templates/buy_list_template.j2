<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>价格信息</title>
    <script src="https://cdn.jsdmirror.com/npm/@tailwindcss/browser@4"></script>
    <script src="https://cdn.jsdmirror.com/npm/chart.js"></script>
    <script src="https://cdn.jsdmirror.com/npm/chartjs-adapter-date-fns"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://unpkg.com/d3-sankey@0.12.3/dist/d3-sankey.min.js"></script>
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
            .table-text {
                font-family: "Microsoft YaHei", sans-serif;
                font-weight: 500;
            }
            table {
                border-collapse: separate;
                border-spacing: 0;
            }
            th, td {
                border-bottom: 1px solid #e5e7eb;
                border-right: 1px solid #e5e7eb;
            }
            th:last-child, td:last-child {
                border-right: none;
            }
            tr:last-child td {
                border-bottom: none;
            }
            .category-header {
                background-color: #f3f4f6;
                font-weight: bold;
            }
            .progress-bar {
                height: 12px;
                background-color: #e5e7eb;
                border-radius: 4px;
                overflow: hidden;
                margin-top: 4px;
                box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
            }
            .progress-bar-fill {
                height: 100%;
                transition: width 0.5s;
                background-image: linear-gradient(135deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
                background-size: 1rem 1rem;
                animation: progress-bar-stripes 1s linear infinite;
            }
            @keyframes progress-bar-stripes {
                from { background-position: 1rem 0; }
                to { background-position: 0 0; }
            }
            .bg-success {
                background-color: #10b981;
            }
            .bg-warning {
                background-color: #f59e0b;
            }
            .bg-danger {
                background-color: #ef4444;
            }
            .status-badge {
                display: inline-flex;
                align-items: center;
                padding: 2px 8px;
                border-radius: 9999px;
                font-size: 0.75rem;
                font-weight: 600;
                text-align: center;
                white-space: nowrap;
                margin-left: 4px;
                box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
            }
            .badge-success {
                background-color: #d1fae5;
                color: #065f46;
            }
            .badge-warning {
                background-color: #fef3c7;
                color: #92400e;
            }
            .badge-danger {
                background-color: #fee2e2;
                color: #b91c1c;
            }
            .high-priority {
                font-weight: bold;
                color: #ef4444;
                animation: pulse 2s infinite;
            }
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.8; }
                100% { opacity: 1; }
            }
            .hover-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
                transition: all 0.2s ease;
            }
        }
    </style>
</head>
<body class="bg-gray-100 p-4">
    <div class="container mx-auto max-w-6xl">
        <!-- 标题区域 -->
        <div class="relative h-[250px] mb-8 rounded-lg overflow-hidden">
            <!-- 背景图片 -->
            <img src="data:image/png;base64,{{ header_image }}" alt="背景" class="absolute inset-0 w-full h-full object-cover">
            <!-- 标题内容 -->
            <div class="absolute inset-0 flex justify-between items-center px-8">
                <h1 class="text-3xl font-bold text-white shadow-text"> {{ header_title }} </h1>
            </div>
        </div>
        <!-- 总体统计区域 -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6 hover-card transition-all duration-300">
            <!-- 总计统计 -->
            <h2 class="text-xl font-bold text-gray-800 mb-4 pb-2 border-b">总体统计</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div class="bg-blue-50 rounded-lg p-4 flex flex-col items-center justify-center">
                    <span class="text-lg font-semibold text-blue-800">总材料种类</span>
                    <span id="total-types" class="text-2xl font-bold text-blue-600">0</span>
                </div>
                <div class="bg-blue-50 rounded-lg p-4 flex flex-col items-center justify-center">
                    <span class="text-lg font-semibold text-blue-800">总体满足率</span>
                    <div class="flex items-center">
                        <span id="total-supply-rate" class="text-2xl font-bold text-blue-600">0%</span>
                        <span id="total-supply-badge" class="status-badge badge-danger ml-2">紧缺</span>
                    </div>
                    <div id="total-progress-bar" class="progress-bar w-full mt-2">
                        <div id="total-progress-fill" class="progress-bar-fill bg-danger" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 材料分类区域 -->
        <div id="materials-container">
            <!-- 各分类的材料将由JS动态生成 -->
        </div>
    </div>

    <div class="text-center text-gray-500 text-sm mt-8 mb-4">
        <p>EVE工业物资采购系统 - kahunaBot</p>
    </div>

    <script>
        // 材料数据
        const buyListData = {{ buy_list_data|tojson }};
        // 供应商数据
        const providerData = {{ provider_data|tojson|default('{}') }};
        
        // 合并供应商数据到材料数据
        Object.keys(buyListData).forEach(category => {
            buyListData[category].forEach(item => {
                item.pl_supply = providerData.PL && providerData.PL[item.id] ? providerData.PL[item.id].quantity : null;
                item.yuese_supply = providerData.Yuese && providerData.Yuese[item.id] ? providerData.Yuese[item.id].quantity : null;
            });
        });

        // 格式化数字显示
        function formatNumber(num) {
            return num.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1,');
        }

        // 获取总计
        function calculateTotals() {
            let totalTypes = 0;
            let totalItems = 0;
            
            Object.keys(buyListData).forEach(category => {
                totalTypes += buyListData[category].length;
                buyListData[category].forEach(item => {
                    totalItems += item.lack;
                });
            });
            
            document.getElementById('total-types').textContent = totalTypes;
        }

        // 计算供应商满足率
        function calculateSupplyRate(item) {
            // 如果缺少数量为0，则满足率为100%
            if (item.lack <= 0) return 1;
            
            // 计算总供应量
            const totalSupply = (item.pl_supply || 0) + (item.yuese_supply || 0);
            // 计算满足率，并确保不超过100%
            const rate = Math.min(totalSupply / item.lack, 1);
            return rate;
        }
        
        // 获取满足度状态
        function getSupplyStatus(rate) {
            if (rate >= 0.9) return { class: 'success', text: '充足' };
            if (rate >= 0.5) return { class: 'warning', text: '部分' };
            return { class: 'danger', text: '紧缺' };
        }
        
        // 计算总体满足率
        function calculateTotalSupplyRate() {
            let totalLack = 0;
            let totalSupply = 0;
            let totalRealLack = 0;
            
            // 遍历所有分类和物品，累计总缺少量和总供应量
            Object.keys(buyListData).forEach(category => {
                buyListData[category].forEach(item => {
                    // 只累计有效的缺少量（大于0的）
                    if (item.lack > 0) {
                        totalLack += item.lack;
                        // 累计供应量，确保为数字
                        item_real_lack = item.lack - (item.pl_supply || 0) - (item.yuese_supply || 0);
                        if (item_real_lack > 0) {
                            totalRealLack += item_real_lack;
                        }
                        totalSupply += (item.pl_supply || 0) + (item.yuese_supply || 0);
                    }
                });
            });
            
            // 计算满足率，如果没有缺少量，则满足率为100%
            const rate = totalLack > 0 ? Math.min(totalRealLack / totalLack, 1) : 1;
            const status = getSupplyStatus(rate);
            
            // 更新UI显示
            document.getElementById('total-supply-rate').textContent = `${Math.round(rate * 100)}%`;
            document.getElementById('total-supply-badge').className = `status-badge badge-${status.class} ml-2`;
            document.getElementById('total-supply-badge').textContent = status.text;
            
            // 更新进度条
            const progressFill = document.getElementById('total-progress-fill');
            progressFill.className = `progress-bar-fill bg-${status.class}`;
            progressFill.style.width = `${rate * 100}%`;
            
            return { rate, totalLack, totalRealLack };
        }
        
        // 渲染每个分类的材料
        function renderMaterialsByCategory() {
            const container = document.getElementById('materials-container');
            container.innerHTML = '';
            
            Object.keys(buyListData).forEach(category => {
                const items = buyListData[category];
                if (items.length === 0) return; // 跳过空分类
                
                // 创建分类卡片
                const categoryCard = document.createElement('div');
                categoryCard.className = 'bg-white rounded-lg shadow-md p-6 mb-6 hover-card transition-all duration-300';
                
                // 分类标题
                const categoryTitle = document.createElement('h2');
                categoryTitle.className = 'text-xl font-bold text-gray-800 mb-4 pb-2 border-b';
                categoryTitle.textContent = category;
                
                // 分类统计信息
                const categoryStats = document.createElement('div');
                categoryStats.className = 'mb-4 flex justify-between items-center';
                
                // 计算该分类的总缺少量和总供应量
                let categoryTotalLack = 0;
                let categoryTotalSupply = 0;
                let categoryTotalRealLack = 0;
                
                items.forEach(item => {
                    // 只累计有效的缺少量（大于0的）
                    if (item.lack > 0) {
                        categoryTotalLack += item.lack;
                        // 累计供应量，确保为数字
                        item_real_lack = item.lack - (item.pl_supply || 0) - (item.yuese_supply || 0);
                        if (item_real_lack > 0) {
                            categoryTotalRealLack += item_real_lack;
                        }
                        categoryTotalSupply += (item.pl_supply || 0) + (item.yuese_supply || 0);
                    }
                });
                
                // 计算满足率，如果没有缺少量，则满足率为100%
                const categorySupplyRate = categoryTotalLack > 0 ? Math.min(categoryTotalRealLack / categoryTotalLack, 1) : 1;
                const categoryStatus = getSupplyStatus(categorySupplyRate);
                
                categoryStats.innerHTML = `
                    <div>
                        <span class="font-semibold">总缺少: ${formatNumber(categoryTotalLack)}</span>
                        <span class="status-badge badge-${categoryStatus.class}">${categoryStatus.text}</span>
                    </div>
                    <div class="text-sm text-gray-500">供应满足率: ${Math.round(categorySupplyRate * 100)}%</div>
                `;
                
                // 进度条
                const progressBar = document.createElement('div');
                progressBar.className = 'progress-bar mb-4';
                
                const progressFill = document.createElement('div');
                progressFill.className = `progress-bar-fill bg-${categoryStatus.class}`;
                progressFill.style.width = `${categorySupplyRate * 100}%`;
                
                progressBar.appendChild(progressFill);
                
                // 材料表格
                const tableContainer = document.createElement('div');
                tableContainer.className = 'overflow-x-auto';
                
                const table = document.createElement('table');
                table.className = 'min-w-full';
                
                // 表头
                const thead = document.createElement('thead');
                thead.className = 'bg-gray-50';
                thead.innerHTML = `
                    <tr>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500">ID</th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500">英文名称</th>
                        <th class="px-4 py-3 text-left text-sm font-medium text-gray-500">中文名称</th>
                        <th class="px-4 py-3 text-right text-sm font-medium text-gray-500">PL供应</th>
                        <th class="px-4 py-3 text-right text-sm font-medium text-gray-500">Yuese供应</th>
                        <th class="px-4 py-3 text-right text-sm font-medium text-gray-500">缺少数量</th>
                        <th class="px-4 py-3 text-center text-sm font-medium text-gray-500">满足度</th>
                    </tr>
                `;
                
                // 表体
                const tbody = document.createElement('tbody');
                tbody.className = 'text-sm table-text';
                
                // 排序：按照缺少数量降序
                items.sort((a, b) => b.lack - a.lack);
                
                items.forEach(item => {
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50 transition-colors';
                    
                    // 计算该物品的供应满足率
                    const supplyRate = calculateSupplyRate(item);
                    const status = getSupplyStatus(supplyRate);
                    
                    // 高亮显示缺失量大的物品
                    const lackClass = item.lack > 10000 ? 'high-priority' : '';
                    const rowClass = item.lack > 50000 ? 'bg-red-50' : (item.lack > 20000 ? 'bg-yellow-50' : '');
                    if (rowClass) {
                        row.classList.add(rowClass);
                    }
                    
                    // 创建进度条
                    const itemProgressBar = `
                        <div class="progress-bar">
                            <div class="progress-bar-fill bg-${status.class}" style="width: ${supplyRate * 100}%"></div>
                        </div>
                    `;
                    
                    // 供应商图标
                    const plIcon = item.pl_supply ? `<span class="inline-block w-2 h-2 rounded-full bg-green-500 mr-1"></span>` : '';
                    const yueseIcon = item.yuese_supply ? `<span class="inline-block w-2 h-2 rounded-full bg-blue-500 mr-1"></span>` : '';
                    
                    row.innerHTML = `
                        <td class="px-4 py-3 text-left">${item.id}</td>
                        <td class="px-4 py-3 text-left">${item.name}</td>
                        <td class="px-4 py-3 text-left">${item.cn_name}</td>
                        <td class="px-4 py-3 text-right">
                            ${plIcon}
                            ${item.pl_supply ? formatNumber(item.pl_supply) : '-'}
                        </td>
                        <td class="px-4 py-3 text-right">
                            ${yueseIcon}
                            ${item.yuese_supply ? formatNumber(item.yuese_supply) : '-'}
                        </td>
                        <td class="px-4 py-3 text-right font-medium ${lackClass}">${formatNumber(item.lack)}</td>
                        <td class="px-4 py-3">
                            <div class="flex flex-col items-center">
                                <span class="status-badge badge-${status.class} mb-1">${status.text}</span>
                                ${itemProgressBar}
                            </div>
                        </td>
                    `;
                    
                    // 添加点击事件以高亮显示行
                    row.addEventListener('click', function() {
                        const allRows = this.parentNode.querySelectorAll('tr');
                        allRows.forEach(r => r.classList.remove('bg-blue-50'));
                        this.classList.add('bg-blue-50');
                    });
                    
                    tbody.appendChild(row);
                });
                
                // 组装表格
                table.appendChild(thead);
                table.appendChild(tbody);
                tableContainer.appendChild(table);
                
                // 组装分类卡片
                categoryCard.appendChild(categoryTitle);
                categoryCard.appendChild(categoryStats);
                categoryCard.appendChild(progressBar);
                categoryCard.appendChild(tableContainer);
                
                // 添加到容器
                container.appendChild(categoryCard);
            });
        }

        // 初始化页面
        document.addEventListener('DOMContentLoaded', function() {
            // 先计算总数据
            calculateTotals();
            // 计算总体满足率
            calculateTotalSupplyRate();
            // 渲染各分类材料
            renderMaterialsByCategory();
            
            // 添加排序功能
            document.querySelectorAll('th').forEach(header => {
                header.style.cursor = 'pointer';
                header.addEventListener('click', function() {
                    const index = Array.from(this.parentNode.children).indexOf(this);
                    sortTable(index);
                });
            });
        });
        
        // 表格排序功能
        function sortTable(columnIndex) {
            // 未来可以实现表格排序功能
            console.log('排序列索引:', columnIndex);
        }
    </script>
</body>
</html>