<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>价格信息</title>
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://unpkg.com/d3-sankey@0.12.3/dist/d3-sankey.min.js"></script>
    <style type="text/tailwindcss">
        @layer utilities {
            .content-auto {
                content-visibility: auto;
            }
        }
    </style>
</head>
<body class="bg-gray-100 p-0 m-0">
    <div id="body1" class="bg-gray-100 p-0 m-0">
        <div class="container mx-auto px-4 w-[900px] bg-white rounded-lg shadow-md p-6 mb-6 mt-6">
            <!-- 标题区域 -->
            <div class="relative h-[250px] mb-8 rounded-lg overflow-hidden">
                <!-- 背景图片 -->
                <img src="data:image/png;base64,{{ header_image }}" alt="背景" class="absolute inset-0 w-full h-full object-cover">
                <!-- 标题内容 -->
                <div class="absolute inset-0 flex justify-between items-center px-8">
                    <h1 class="text-3xl font-bold text-white shadow-text"> 化矿分析</h1>
                </div>
            </div>

            <!-- 总价值信息 -->
            <div class="mb-8 p-4 bg-blue-50 rounded-lg">
                <h2 class="text-xl font-semibold mb-2">总价值信息</h2>
                <div class="grid grid-cols-3 gap-4">
                    <div class="bg-white p-3 rounded shadow">
                        <p class="text-gray-600">总资源价格</p>
                        <p class="text-lg font-bold text-blue-600" id="totalResourcePrice"></p>
                    </div>
                    <div class="bg-white p-3 rounded shadow">
                        <p class="text-gray-600">总产出价格</p>
                        <p class="text-lg font-bold text-green-600" id="totalProductPrice"></p>
                    </div>
                    <div class="bg-white p-3 rounded shadow">
                        <p class="text-gray-600">总多余价格</p>
                        <p class="text-lg font-bold text-red-600" id="totalWastePrice"></p>
                    </div>
                </div>
            </div>

            <!-- 材料需求图表 -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4">材料需求分析</h2>
                <div class="bg-white p-4 rounded-lg shadow">
                    <canvas id="materialsChart" height="200"></canvas>
                </div>
                
                <!-- 材料详细数据表格 -->
                <div class="mt-4 overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="py-2 px-4 border-b text-left">材料名称</th>
                                <th class="py-2 px-4 border-b text-left">需求量</th>
                                <th class="py-2 px-4 border-b text-left">价格 (ISK)</th>
                            </tr>
                        </thead>
                        <tbody id="materialsTableBody">
                            <!-- 材料数据将通过JavaScript填充 -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 产物分析图表 -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4">产物分析</h2>
                <div class="bg-white p-4 rounded-lg shadow">
                    <canvas id="productsChart" height="200"></canvas>
                </div>
                
                <!-- 产物详细数据表格 -->
                <div class="mt-4 overflow-x-auto">
                    <table class="min-w-full bg-white">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="py-2 px-4 border-b text-left">产物名称</th>
                                <th class="py-2 px-4 border-b text-left">需求量</th>
                                <th class="py-2 px-4 border-b text-left">实际产量</th>
                                <th class="py-2 px-4 border-b text-left">浪费单位</th>
                                <th class="py-2 px-4 border-b text-left">浪费价值 (ISK)</th>
                            </tr>
                        </thead>
                        <tbody id="productsTableBody">
                            <!-- 产物数据将通过JavaScript填充 -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- 材料到产物的桑基图 -->
            <div class="mb-8">
                <h2 class="text-xl font-semibold mb-4">材料到产物的流向分析</h2>
                <div class="bg-white p-4 rounded-lg shadow">
                    <div id="sankeyChart" style="width: 100%; height: 500px;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- 移动到最外层的页脚 -->
    <div class="text-center text-gray-500 text-sm mt-4">
        <p>紫竹梅实验型工业核心mk.1 - kahunaBot</p>
    </div>

    <script>
        // 格式化数字的函数
        function formatNumber(num) {
            return new Intl.NumberFormat('en-US').format(num);
        }
        
        // 格式化ISK的函数
        function formatISK(num) {
            if (num >= 1e15) {
                return (num / 1e15).toFixed(2) + ' Q';
            } else if (num >= 1e12) {
                return (num / 1e12).toFixed(2) + ' T';
            } else if (num >= 1e9) {
                return (num / 1e9).toFixed(2) + ' B';
            } else if (num >= 1e6) {
                return (num / 1e6).toFixed(2) + ' M';
            } else if (num >= 1e3) {
                return (num / 1e3).toFixed(2) + ' K';
            }
            return num.toFixed(2);
        }

        // 数据
        const data = {{ data|tojson }};

        // 设置总价值信息
        document.getElementById('totalResourcePrice').textContent = formatISK(data.total_resource_price) + ' ISK';
        document.getElementById('totalProductPrice').textContent = formatISK(data.total_product_price) + ' ISK';
        document.getElementById('totalWastePrice').textContent = formatISK(data.total_real_waste_price) + ' ISK';

        // 准备材料数据
        const materialIds = Object.keys(data.need);
        const materialNames = materialIds.map(id => data.need[id].name);
        const materialNeeds = materialIds.map(id => data.need[id].need);
        const materialPrices = materialIds.map(id => data.need[id].price);

        // 填充材料表格
        const materialsTableBody = document.getElementById('materialsTableBody');
        materialIds.forEach(id => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="py-2 px-4 border-b">${data.need[id].name}</td>
                <td class="py-2 px-4 border-b">${formatNumber(data.need[id].need)}</td>
                <td class="py-2 px-4 border-b">${formatISK(data.need[id].price)} ISK</td>
            `;
            materialsTableBody.appendChild(row);
        });

        // 创建材料图表
        const materialsCtx = document.getElementById('materialsChart').getContext('2d');
        new Chart(materialsCtx, {
            type: 'bar',
            data: {
                labels: materialNames,
                datasets: [
                    {
                        label: '需求量',
                        data: materialNeeds,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        yAxisID: 'y'
                    },
                    {
                        label: '价格 (ISK)',
                        data: materialPrices,
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '需求量'
                        }
                    },
                    y1: {
                        beginAtZero: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: '价格 (ISK)'
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.datasetIndex === 0) {
                                    label += formatNumber(context.raw);
                                } else {
                                    label += formatISK(context.raw) + ' ISK';
                                }
                                return label;
                            }
                        }
                    }
                }
            }
        });

        // 准备产物数据
        const productIds = Object.keys(data.product);
        const productNames = productIds.map(id => data.product[id].name);
        const productNeeds = productIds.map(id => data.product[id].need);
        const productActuals = productIds.map(id => data.product[id].actual_production);
        const productWastes = productIds.map(id => data.product[id].waste_unit);

        // 填充产物表格
        const productsTableBody = document.getElementById('productsTableBody');
        productIds.forEach(id => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td class="py-2 px-4 border-b">${data.product[id].name}</td>
                <td class="py-2 px-4 border-b">${formatNumber(data.product[id].need)}</td>
                <td class="py-2 px-4 border-b">${formatNumber(data.product[id].actual_production)}</td>
                <td class="py-2 px-4 border-b">${formatNumber(data.product[id].waste_unit)}</td>
                <td class="py-2 px-4 border-b">${formatISK(data.product[id].waste_price)} ISK</td>
            `;
            productsTableBody.appendChild(row);
        });

        // 创建产物图表
        const productsCtx = document.getElementById('productsChart').getContext('2d');
        new Chart(productsCtx, {
            type: 'bar',
            data: {
                labels: productNames,
                datasets: [
                    {
                        label: '需求量',
                        data: productNeeds,
                        backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '实际产量',
                        data: productActuals,
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    },
                    {
                        label: '浪费单位',
                        data: productWastes,
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: '数量'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                label += formatNumber(context.raw);
                                return label;
                            }
                        }
                    }
                }
            }
        });

        // 创建桑基图
        function createSankeyChart() {
            // 准备桑基图数据
            const sankeyData = {
                nodes: [],
                links: []
            };
            
            // 添加材料节点
            let nodeIndex = 0;
            const materialNodeIndices = {};
            
            // 只添加在connect中有数据的材料节点
            Object.keys(data.connect).forEach(id => {
                if (data.connect[id] && Object.keys(data.connect[id].product).length > 0) {
                    sankeyData.nodes.push({
                        name: data.connect[id].name,
                        group: "material"
                    });
                    materialNodeIndices[id] = nodeIndex++;
                }
            });
            
            // 添加产物节点
            const productNodeIndices = {};
            productIds.forEach(id => {
                if (data.product[id].actual_production > 0) {
                    sankeyData.nodes.push({
                        name: data.product[id].name,
                        group: "product"
                    });
                    productNodeIndices[id] = nodeIndex++;
                }
            });
            
            // 使用connect数据创建连接
            Object.keys(data.connect).forEach(materialId => {
                if (!data.connect[materialId] || !data.connect[materialId].product) return;
                
                Object.keys(data.connect[materialId].product).forEach(productId => {
                    const productValue = data.connect[materialId].product[productId].product_value;
                    
                    if (productValue > 0 && materialNodeIndices[materialId] !== undefined && productNodeIndices[productId] !== undefined) {
                        sankeyData.links.push({
                            source: materialNodeIndices[materialId],
                            target: productNodeIndices[productId],
                            value: productValue
                        });
                    }
                });
            });
            
            // 设置图表尺寸和边距
            const margin = {top: 10, right: 10, bottom: 10, left: 10};
            const width = document.getElementById('sankeyChart').clientWidth - margin.left - margin.right;
            const height = document.getElementById('sankeyChart').clientHeight - margin.top - margin.bottom;
            
            // 清除现有图表
            d3.select("#sankeyChart").selectAll("*").remove();
            
            // 创建SVG元素
            const svg = d3.select("#sankeyChart")
                .append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);
            
            // 创建桑基图生成器
            const sankey = d3.sankey()
                .nodeWidth(15)
                .nodePadding(10)
                .extent([[1, 1], [width - 1, height - 5]]);
            
            // 生成桑基图布局
            const sankeyData2 = sankey(sankeyData);
            
            // 添加连接
            svg.append("g")
                .selectAll("path")
                .data(sankeyData2.links)
                .join("path")
                .attr("d", d3.sankeyLinkHorizontal())
                .attr("stroke", d => {
                    // 使用渐变色，从源节点颜色到目标节点颜色
                    return "rgba(54, 162, 235, 0.3)";
                })
                .attr("stroke-width", d => Math.max(1, d.width))
                .attr("fill", "none")
                .append("title")
                .text(d => `${sankeyData.nodes[d.source.index].name} → ${sankeyData.nodes[d.target.index].name}\n数量: ${formatNumber(d.value)}`);
            
            // 添加节点
            const node = svg.append("g")
                .selectAll("rect")
                .data(sankeyData2.nodes)
                .join("rect")
                .attr("x", d => d.x0)
                .attr("y", d => d.y0)
                .attr("height", d => d.y1 - d.y0)
                .attr("width", d => d.x1 - d.x0)
                .attr("fill", d => d.group === "material" ? "rgba(54, 162, 235, 0.8)" : "rgba(255, 99, 132, 0.8)")
                .attr("stroke", "#000")
                .append("title")
                .text(d => `${d.name}\n数量: ${formatNumber(d.value)}`);
            
            // 添加节点标签
            svg.append("g")
                .selectAll("text")
                .data(sankeyData2.nodes)
                .join("text")
                .attr("x", d => d.x0 < width / 2 ? d.x1 + 6 : d.x0 - 6)
                .attr("y", d => (d.y1 + d.y0) / 2)
                .attr("dy", "0.35em")
                .attr("text-anchor", d => d.x0 < width / 2 ? "start" : "end")
                .text(d => d.name)
                .style("font-size", "10px")
                .style("fill", "#333")
                .filter(d => (d.x1 - d.x0) > 100) // 只为宽度足够的节点添加内部标签
                .attr("x", d => (d.x0 + d.x1) / 2)
                .attr("text-anchor", "middle");
        }
        
        // 在页面加载完成后创建桑基图
        window.addEventListener('load', createSankeyChart);
        // 在窗口大小改变时重新创建桑基图
        window.addEventListener('resize', createSankeyChart);
    </script>
</body>
</html>